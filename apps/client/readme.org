#+TITLE: Setup

* Introduction
  This is the web frontend for our cluster-api-manager, and allows permitted members to create new pairing instances on a packet account.

  It is written in clojure, using a ring web server and routing through compojure.
* Preliminary setup

Declare the host to bring the site up on
  e.g: pair.myname.sharing.io

#+begin_src elisp :results none
  (setenv "PAIR_HOST" (read-from-minibuffer "PAIR_HOST: "))
#+end_src

#+name: get-pair-host
#+begin_src elisp :results silent
  (getenv "PAIR_HOST")
#+end_src

* Dependencies

** System

Install a few system packages required for development
#+begin_src shell :results silent
  sudo apt update && \
  sudo apt install -y openjdk-14-jdk rlwrap
#+end_src

** Clojure Dependencies

Install lein
#+begin_src shell :results silent
  curl -OL -o lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
  chmod +x lein
  sudo mv lein /usr/local/bin/lein
  lein || true
#+end_src

Install clojure
#+begin_src shell :results silent
  curl -O https://download.clojure.org/install/linux-install-1.10.1.697.sh
  chmod +x linux-install-1.10.1.697.sh
  sudo ./linux-install-1.10.1.697.sh
  rm ./linux-install-1.10.1.697.sh
#+end_src

* Map to Ingress in-cluster

Create a Kubernetes Service resource into Humacs, to route traffic to pair
#+begin_src yaml :tangle sharingio-pair-service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: sharingio-pair
  spec:
    ports:
    - name: http
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app.kubernetes.io/name: humacs
#+end_src

Create an Ingress mapping
#+begin_src yaml :tangle sharingio-pair-ingress.yaml :noweb yes
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: sharingio-pair
spec:
  rules:
  - host: <<get-pair-host()>>
    http:
      paths:
      - backend:
          serviceName: sharingio-pair
          servicePort: 5000
        path: /
#+end_src

#+begin_src shell :results silent
  kubectl apply -f sharingio-pair-service.yaml -f sharingio-pair-ingress.yaml
#+end_src

#+RESULTS:
#+begin_example
service/sharingio-pair created
ingress.networking.k8s.io/sharingio-pair created
#+end_example

** Certs (optional)

Create a Certificate (management resource)
#+begin_src yaml :tangle sharingio-pair-certificate.yaml :noweb yes
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: letsencrypt-prod-sharingio-pair
spec:
  secretName: letsencrypt-prod-sharingio-pair
  issuerRef:
    name: letsencrypt-prod-sharing.io-pair
    kind: ClusterIssuer
    group: cert-manager.io
  dnsNames:
    - <<get-pair-host()>>
#+end_src

Create a ClusterIssuer resource
#+begin_src yaml :tangle sharingio-pair-cluster-issuer.yaml :noweb yes
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod-sharingio-pair
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: pair-sharing-io-certificates@ii.coop
    privateKeySecretRef:
      name: letsencrypt-prod-sharingio-pair
    solvers:
      - http01:
          ingress:
            class: nginx
        selector:
          dnsNames:
            - <<get-pair-host()>>
#+end_src

Create an Ingress mapping
#+begin_src yaml :tangle sharingio-pair-ingress-tls.yaml :noweb yes
  apiVersion: networking.k8s.io/v1beta1
  kind: Ingress
  metadata:
    name: sharingio-pair
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      kubernetes.io/ingress.class: nginx
      certmanager.k8s.io/cluster-issuer: "letsencrypt-prod-sharingio-pair"
      certmanager.k8s.io/acme-challenge-type: http01
  spec:
    tls:
    - hosts:
      - <<get-pair-host()>>
      secretName: letsencrypt-prod-sharingio-pair
    rules:
    - host: <<get-pair-host()>>
      http:
        paths:
        - backend:
            serviceName: sharingio-pair
            servicePort: 5000
          path: /
#+end_src

#+begin_src shell :results silent
  kubectl apply -f sharingio-pair-certificate.yaml -f sharingio-pair-cluster-issuer.yaml -f sharingio-pair-ingress-tls.yaml
#+end_src

* Build

Create Java jar files out of the clojure
#+begin_src shell :dir :results silent
  lein ring uberjar
#+end_src

* Config
  This sets our env vars to a =.env= file we can then invoke when starting up the app.

#+begin_src elisp :results none
    (setenv "BACKEND_ADDRESS" (read-from-minibuffer "BACKEND_ADDRESS: " "localhost:8080"))
    (setenv "OAUTH_CLIENT_ID" (read-from-minibuffer "OAUTH_CLIENT_ID: "))
    (setenv "OAUTH_CLIENT_SECRET" (read-from-minibuffer "OAUTH_CLIENT_SECRET: "))
#+end_src

#+name: get-oauth-client-id
#+begin_src elisp :results silent
  (getenv "OAUTH_CLIENT_ID")
#+end_src

#+name: get-oauth-client-secret
#+begin_src elisp :results silent
  (getenv "OAUTH_CLIENT_SECRET")
#+end_src

#+name: get-backend-address
#+begin_src elisp :results silent
  (or (getenv "BACKEND_ADDRESS") "localhost:8080")
#+end_src

#+begin_src shell :tangle ./.env :noweb yes
  SESSION_SECRET=pairpairpairpair
  BACKEND_ADDRESS=<<get-backend-address()>>
  OAUTH_CLIENT_ID=<<get-oauth-client-id()>>
  OAUTH_CLIENT_SECRET=<<get-oauth-client-secret()>>
#+end_src

#+RESULTS:
#+begin_example
#+end_example

* Running in Development
Run this in a separate window, so it doesn't hold up the buffer:
#+begin_src tmate :dir . :window dev-ring
  export $(cat .env | xargs)
  lein ring server-headless
#+end_src

This will create a repl with an nrepl port, so you can connect to it from a clojure file with the command
: cider-connect-clj

Easiest is to navigate to client/src/client/web.clj and then type =,scj= and choose =localhost= as yr server.  It should already have a port set for you, and so you can just hit enter on that port screen.

* Build and Run for Production
  For production, you want to build an uberjar, and then run that .jar file with the correct env vars.
  This .jar file will be an embedded server set to run on port 5000, though you can specify a new port by declaring a PORT env var.

#+NAME: Build the uberjar
#+begin_src tmate :dir . :window prod
lein ring uberjar
#+end_src

This outputs a new uberjar at =client/target/uberjar/client-0.1.0-standalone.jar=

You can then run it with

#+begin_src tmate :dir . :window prod
  export $(cat .env | xargs)
  java -jar target/uberjar/client-0.1.0-standalone.jar
#+end_src

* Next
  This app requires having a working backend, so make sure you have this up and running by following the instructions at
 [[file:~/pair/apps/cluster-api-manager/README.org][cluster-api-manager/readme.org]]
