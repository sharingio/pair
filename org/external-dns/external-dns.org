#+TITLE: External DNS

#+begin_src elisp :results none
  (setenv "AWS_ACCOUNT_ID" (read-from-minibuffer "AWS_ACCOUNT_ID"))
  (setenv "AWS_IAM_SERVICE_ROLE_NAME" (read-from-minibuffer "AWS_IAM_SERVICE_ROLE_NAME"))
  (setenv "AWS_DOMAIN_FILTER" (read-from-minibuffer "AWS_DOMAIN_FILTER"))
  (setenv "AWS_TXT_ORDERED_ID" (read-from-minibuffer "AWS_TXT_ORDERED_ID"))
  (setenv "AWS_ACCESS_KEY_ID" (read-from-minibuffer "AWS_ACCESS_KEY_ID"))
  (setenv "AWS_SECRET_TOKEN_KEY" (read-from-minibuffer "AWS_SECRET_TOKEN_KEY"))
  (setenv "AWS_SESSION_TOKEN" (read-from-minibuffer "AWS_SESSION_TOKEN"))
#+end_src

#+name: get-aws-account-id
#+begin_src elisp :results silent
  (getenv "AWS_ACCOUNT_ID")
#+end_src

#+name: get-aws-iam-service-role-name
#+begin_src elisp :results silent
  (getenv "AWS_IAM_SERVICE_ROLE_NAME")
#+end_src

#+name: get-aws-domain-filter
#+begin_src elisp :results silent
  (getenv "AWS_DOMAIN_FILTER")
#+end_src

#+name: get-aws-txt-ordered-id
#+begin_src elisp :results silent
  (getenv "AWS_TXT_ORDERED_ID")
#+end_src

#+name: get-aws-access-key-id
#+begin_src elisp :results silent
  (getenv "AWS_ACCESS_KEY_ID")
#+end_src

#+name: get-aws-secret-token-key
#+begin_src elisp :results silent
  (getenv "AWS_SECRET_TOKEN_KEY")
#+end_src

#+name: get-aws-session-token
#+begin_src elisp :results silent
  (getenv "AWS_SESSION_TOKEN")
#+end_src

#+begin_src yaml :noweb yes
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: external-dns
    # If you're using Amazon EKS with IAM Roles for Service Accounts, specify the following annotation.
    # Otherwise, you may safely omit it.
    annotations:
      # Substitute your account ID and IAM service role name below.
      eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/IAM-SERVICE-ROLE-NAME
  ---
  apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: external-dns
  rules:
  - apiGroups: [""]
    resources: ["services","endpoints","pods"]
    verbs: ["get","watch","list"]
  - apiGroups: ["extensions","networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get","watch","list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list","watch"]
  ---
  apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: external-dns-viewer
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: external-dns
  subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: default
  ---
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: external-dns
  spec:
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: external-dns
    template:
      metadata:
        labels:
          app: external-dns
        # If you're using kiam or kube2iam, specify the following annotation.
        # Otherwise, you may safely omit it.
        annotations:
          iam.amazonaws.com/role: arn:aws:iam::ACCOUNT-ID:role/IAM-SERVICE-ROLE-NAME
      spec:
        serviceAccountName: external-dns
        containers:
        - name: external-dns
          image: k8s.gcr.io/external-dns/external-dns:v0.7.3
          args:
          - --source=service
          - --source=ingress
          - --provider=aws
          - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
          - --aws-zone-type=public # only look at public hosted zones (valid values are public, private or no value for both)
          - --registry=txt
          env:
            - name: EXTERNAL_DNS_DOMAIN_FILTER
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws
                  key: domain-filter
            - name: EXTERNAL_DNS_TXT_OWNER_ID
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws
                  key: txt-owner-id
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws
                  key: aws-secret-access-key
            - name: AWS_SESSION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: external-dns-aws
                  key: aws-session-token
        securityContext:
          fsGroup: 65534 # For ExternalDNS to be able to read Kubernetes and AWS token files
#+end_src

* Installation

Create the namespace:
#+begin_src shell
  kubectl create ns external-dns
#+end_src

Create the AWS secret:
#+begin_src shell :noweb yes
  kubectl -n external-dns create secret generic external-dns-aws \
    --from-literal=domain-filter= \
    --from-literal=txt-owner-id= \
    --from-literal=aws-access-key-id= \
    --from-literal=aws-secret-access-key= \
    --from-literal=aws-session-token=
#+end_src
