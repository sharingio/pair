#!/bin/bash

GIT_ROOT=$(git rev-parse --show-toplevel)
rm $GIT_ROOT/.sharing.io/setup-complete

if ! git remote -v | grep -q gitlab; then
    git remote add gitlab git@gitlab.com:sharingio/pair.git
fi

if [ -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]; then
    /usr/local/bin/tmate-wait-for-socket.sh
    PACKET_PROJECT_ID="$(kubectl -n kube-system get secret packet-cloud-config -o=jsonpath='{.data.cloud\-sa\.json}' | base64 -d | jq -r .projectID)"
    export APP_NAMESPACE=sharingio-pair
    kubectl get ns $APP_NAMESPACE || kubectl create ns $APP_NAMESPACE
    kubectl get ns $APP_NAMESPACE-instances || kubectl create ns $APP_NAMESPACE-instances
    PACKET_API_KEY="$(kubectl -n kube-system get secret packet-cloud-config -o=jsonpath='{.data.cloud\-sa\.json}' | base64 -d | jq -r .apiKey)"

    envsubst < $GIT_ROOT/.sharing.io/pair-soa.yaml | kubectl apply -f -

    if [ ! -f $GIT_ROOT/.env ]; then
        cat <<EOF > $GIT_ROOT/.env
TZ=Pacific/Auckland
PACKET_API_KEY=$PACKET_API_KEY
EOF
    fi

    if [ ! -f $GIT_ROOT/apps/client/.env ]; then
        cat <<EOF > $GIT_ROOT/apps/client/.env
SESSION_SECRET=pairpairpairpair
BACKEND_ADDRESS=localhost:8080
CANONICAL_URL=pair.${SHARINGIO_PAIR_BASE_DNS_NAME}
SUBDOMAIN=%s.%s.pair.${SHARINGIO_PAIR_BASE_DNS_NAME}
SHARINGIO_PAIR_SET_HOSTNAME=pair
SHARINGIO_PAIR_INGRESS_RECONCILER_ALLOWED_PORTS=5000
EOF
    fi

    if [ ! -f $GIT_ROOT/apps/cluster-api-manager/.env ]; then
        cat <<EOF > $GIT_ROOT/apps/cluster-api-manager/.env
APP_PORT=127.0.0.1:8080
APP_TARGET_NAMESPACE=${APP_NAMESPACE}-instances
APP_BASE_HOST=pair.${SHARINGIO_PAIR_BASE_DNS_NAME}
APP_PACKET_PROJECT_ID=${PACKET_PROJECT_ID}
EOF
    fi

    if ! kubectl -n capi-system get deployment capi-controller-manager 2>&1 > /dev/null; then
        echo "[!] Initialising Cluster-API with the infrastucture provider for Packet"
        tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n cluster-api-init bash
        tmate -S $TMATE_SOCKET send-keys -t cluster-api-init "export \$(cat $GIT_ROOT/.env | xargs)" Enter
        tmate -S $TMATE_SOCKET send-keys -t cluster-api-init "clusterctl init --infrastructure packet" Enter
    fi

    if ! cat "$GIT_ROOT/.env" | grep -q OAUTH_CLIENT_ID; then
        tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n pair-setup $GIT_ROOT/.sharing.io/prepare-env.sh

        while [ ! -f $GIT_ROOT/.sharing.io/setup-complete ]; do
            echo "Waiting for Pair setup to complete"
            sleep 1s
        done
    fi

    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD/apps/cluster-api-manager" -n backend bash
    tmate -S $TMATE_SOCKET send-keys -t backend "export \$(cat $GIT_ROOT/.env | xargs)" Enter
    tmate -S $TMATE_SOCKET send-keys -t backend "go run ." Enter

    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD/apps/client" -n frontend bash
    tmate -S $TMATE_SOCKET send-keys -t frontend "export \$(cat $GIT_ROOT/.env | xargs) \$(cat $GIT_ROOT/apps/client/.env | xargs)" Enter
    tmate -S $TMATE_SOCKET send-keys -t frontend "lein ring server-headless 5000" Enter
fi
