#+TITLE: Setup

* Preliminary setup

Declare the host to bring the site up on
  e.g: pair.myname.sharing.io

#+begin_src elisp :results none
  (setenv "PAIR_HOST" (read-from-minibuffer "PAIR_HOST: "))
#+end_src

#+name: get-pair-host
#+begin_src elisp :results silent
  (getenv "PAIR_HOST")
#+end_src

* Dependencies

** System

Install a few system packages required for development
#+begin_src shell :results silent
  sudo apt update && \
  sudo apt install -y openjdk-14-jdk rlwrap
#+end_src

** Extras

Install lein
#+begin_src shell :results silent
  curl -OL -o lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
  chmod +x lein
  sudo mv lein /usr/local/bin/lein
  lein || true
#+end_src

Install clojure
#+begin_src shell :results silent
  curl -O https://download.clojure.org/install/linux-install-1.10.1.697.sh
  chmod +x linux-install-1.10.1.697.sh
  sudo ./linux-install-1.10.1.697.sh
  rm ./linux-install-1.10.1.697.sh
#+end_src

* Map to Ingress in-cluster

Create a Kubernetes Service resource into Humacs, to route traffic to pair
#+begin_src yaml :tangle sharingio-pair-service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: sharingio-pair
  spec:
    ports:
    - name: http
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app.kubernetes.io/name: humacs
#+end_src

Create an Ingress mapping
#+begin_src yaml :tangle sharingio-pair-ingress.yaml :noweb yes
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: sharingio-pair
spec:
  rules:
  - host: <<get-pair-host()>>
    http:
      paths:
      - backend:
          serviceName: sharingio-pair
          servicePort: 5000
        path: /
#+end_src

#+begin_src shell :results silent
  kubectl apply -f sharingio-pair-service.yaml -f sharingio-pair-ingress.yaml
#+end_src

#+RESULTS:
#+begin_example
service/sharingio-pair created
ingress.networking.k8s.io/sharingio-pair created
#+end_example

** Certs (optional)

Create a Certificate (management resource)
#+begin_src yaml :tangle sharingio-pair-certificate.yaml :noweb yes
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: letsencrypt-prod-sharingio-pair
spec:
  secretName: letsencrypt-prod-sharingio-pair
  issuerRef:
    name: letsencrypt-prod-sharing.io-pair
    kind: ClusterIssuer
    group: cert-manager.io
  dnsNames:
    - <<get-pair-host()>>
#+end_src

Create a ClusterIssuer resource
#+begin_src yaml :tangle sharingio-pair-cluster-issuer.yaml :noweb yes
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod-sharingio-pair
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: pair-sharing-io-certificates@ii.coop
    privateKeySecretRef:
      name: letsencrypt-prod-sharingio-pair
    solvers:
      - http01:
          ingress:
            class: nginx
        selector:
          dnsNames:
            - <<get-pair-host()>>
#+end_src

Create an Ingress mapping
#+begin_src yaml :tangle sharingio-pair-ingress-tls.yaml :noweb yes
  apiVersion: networking.k8s.io/v1beta1
  kind: Ingress
  metadata:
    name: sharingio-pair
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      kubernetes.io/ingress.class: nginx
      certmanager.k8s.io/cluster-issuer: "letsencrypt-prod-sharingio-pair"
      certmanager.k8s.io/acme-challenge-type: http01
  spec:
    tls:
    - hosts:
      - <<get-pair-host()>>
      secretName: letsencrypt-prod-sharingio-pair
    rules:
    - host: <<get-pair-host()>>
      http:
        paths:
        - backend:
            serviceName: sharingio-pair
            servicePort: 5000
          path: /
#+end_src

#+begin_src shell :results silent
  kubectl apply -f sharingio-pair-certificate.yaml -f sharingio-pair-cluster-issuer.yaml -f sharingio-pair-ingress-tls.yaml
#+end_src

* Build

Create Java jar files out of the clojure
#+begin_src shell :dir ../../ :results silent
  lein uberjar
#+end_src

* Create a database

Create a namespace
#+begin_src shell
  kubectl create ns pair
#+end_src

#+RESULTS:
#+begin_example
namespace/pair created
#+end_example

Create the database secrets
#+begin_src shell
  kubectl -n pair create secret generic postgres-configuration \
    --from-literal=POSTGRES_DB=pair \
    --from-literal=POSTGRES_USER=pair \
    --from-literal=POSTGRES_PASSWORD=pair \
    --from-literal=PGUSER=pair \
    --from-literal=PGPASSWORD=pair \
    --from-literal=PGDATABASE=pair
#+end_src

#+RESULTS:
#+begin_example
secret/postgres-configuration created
#+end_example

Create the Postgres instance
#+begin_src shell
  kubectl -n pair apply -f postgres.yaml
#+end_src

#+RESULTS:
#+begin_example
service/postgres created
statefulset.apps/postgres created
#+end_example

* Config
#+begin_src elisp :results none
  (setenv "BACKEND_ADDRESS" (read-from-minibuffer "BACKEND_ADDRESS(localhost:8080 if dev): "))
  (setenv "OAUTH_CLIENT_ID" (read-from-minibuffer "OAUTH_CLIENT_ID: "))
  (setenv "OAUTH_CLIENT_SECRET" (read-from-minibuffer "OAUTH_CLIENT_SECRET: "))
#+end_src

#+name: get-oauth-client-id
#+begin_src elisp :results silent
  (getenv "OAUTH_CLIENT_ID")
#+end_src

#+name: get-oauth-client-secret
#+begin_src elisp :results silent
  (getenv "OAUTH_CLIENT_SECRET")
#+end_src

#+name: get-backend-address
#+begin_src elisp :results silent
  (getenv "BACKEND_ADDRESS")
#+end_src

#+begin_src shell :tangle ../../.env :noweb yes
  DATABASE_URL=postgres://pair:pair@postgres.pair/pair?sslmode=disable
  SESSION_SECRET=hahahahahahahaha
  CANONICAL_URL=<<get-pair-host()>>
  SUBDOMAIN=%s.%s.<<get-pair-host()>>
  BACKEND_ADDRESS=<<get-backend-address()>>
  OAUTH_CLIENT_ID=<<get-oauth-client-id()>>
  OAUTH_CLIENT_SECRET=<<get-oauth-client-secret()>>
#+end_src

#+RESULTS:
#+begin_example
#+end_example

* Migrate the database

Run migrations
#+begin_src shell :dir ../../
  export $(cat .env | xargs)
  lein run -m syme.db
#+end_src

#+RESULTS:
#+begin_example
Running migration: initial-schema
Running migration: add-instance-id
Running migration: add-shutdown-token
#+end_example

* Launching

Run this in a separate window, so it doesn't hold up the buffer:
#+begin_src shell :dir ../../
  export $(cat .env | xargs)
  java $JVM_OPTS -cp target/uberjar/syme-standalone.jar clojure.main -m syme.web
#+end_src


